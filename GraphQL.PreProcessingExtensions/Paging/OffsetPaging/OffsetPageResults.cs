using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace HotChocolate.PreProcessingExtensions.Pagination
{
    /// <summary>
    /// Model class for representing a paging result set that was computed using Cursor Pagination process by offering
    /// a default implementation of the IOffsetPageResults interface which de-couples the code that executes queries 
    /// from the actual PreProcessing extension classes used for the HotChocolate.
    /// This class generally to be used by libraries and/or lower level code that executes queries and renders page results.
    /// </summary>
    /// <typeparam name="TEntity"></typeparam>
    public class OffsetPageResults<TEntity> : List<TEntity>, IOffsetPageResults<TEntity>
    {
        public OffsetPageResults(IEnumerable<TEntity> results, bool hasNextPage, bool hasPreviousPage, int? totalCount)
        {
            this.AddRange(results ?? throw new ArgumentException(nameof(results)));
            this.HasNextPage = hasNextPage;
            this.HasPreviousPage = hasPreviousPage;
            this.TotalCount = totalCount;
        }

        public int? TotalCount { get; protected set; }

        public bool HasNextPage { get; protected set; }

        public bool HasPreviousPage { get; protected set; }


        public OffsetPageResults<TTargetType> OfType<TTargetType>()
        {
            var results = this.OfType<TTargetType>();
            return new OffsetPageResults<TTargetType>(results, this.HasNextPage, this.HasPreviousPage, this.TotalCount);
        }

        public OffsetPageResults<TTargetType> AsMappedType<TTargetType>(Func<TEntity, TTargetType> mappingFunc)
        {
            var results = this.Select(r => mappingFunc(r));
            return new OffsetPageResults<TTargetType>(results, this.HasNextPage, this.HasPreviousPage, this.TotalCount);
        }

        public PreProcessedOffsetPageResults<TEntity> AsPreProcessedPageResults()
        {
            return new PreProcessedOffsetPageResults<TEntity>(this);
        }
    }

    public static class PreprocessedOffsetPagingResultsExtensions
    {
        /// <summary>
        /// Convenience method to Wrap the current Enumerable Result Items as a PreProcessed Paging Results; to eliminate
        /// ceremonial code for new-ing up the results.
        /// </summary>
        /// <typeparam name="TEntity"></typeparam>
        /// <param name="enumerableItems"></param>
        /// <param name="hasNextPage"></param>
        /// <param name="hasPreviousPage"></param>
        /// <param name="totalCount"></param>
        /// <returns></returns>
        public static PreProcessedOffsetPageResults<TEntity> AsPreProcessedOffsetPageResults<TEntity>(this IEnumerable<TEntity> enumerableItems, bool hasNextPage, bool hasPreviousPage, int? totalCount = null)
        {
            if (enumerableItems == null)
                return null;

            //First new up our Offset Page results model (normally generated by a library or method that implements the Paging Logic)!
            var offsetPageResults = new OffsetPageResults<TEntity>(enumerableItems, hasNextPage, hasPreviousPage, totalCount);
            return offsetPageResults.AsPreProcessedPageResults();
        }
    }
}
